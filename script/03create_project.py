import os
import re

def create_project_from_ai_output(input_file="01base.md"):
    """
    Parses a markdown file generated by an AI and creates the full project
    structure and files based on the specified paths and code blocks.

    This script assumes the AI formats files as:
    ### **File: `path/to/your/file.ext`**
    ```language
    ... file content ...
    ```

    Args:
        input_file (str): The name of the markdown file to read from.
    """
    print(f"--- Starting Project Generator ---")
    print(f"Reading from input file: '{input_file}'")

    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"\n[ERROR] Input file '{input_file}' not found.")
        print("Please ensure the AI's complete output is saved in this file in the same directory as the script.")
        return
    except Exception as e:
        print(f"\n[ERROR] Could not read file '{input_file}': {e}")
        return

    # --- REFINED REGEX ---
    # This regex is specifically tailored to the AI's output format.
    # It is more robust because it uses the backticks (`) around the file path
    # as a non-negotiable anchor, preventing mismatches with descriptive headers.
    #
    # Breakdown:
    #   - `^(?:#+)\s+`: Matches the markdown header (e.g., "### ") at the start of a line.
    #   - `(?:.*?)`: Non-greedily matches any characters like "File: " or "**".
    #   - `` `([a-zA-Z0-9/\\._-]+)` ``: The key part. It finds and captures (Group 1) the
    #     file path, which MUST be enclosed in backticks. This is the improvement.
    #   - `(?:.*?)`: Matches any remaining characters on the header line.
    #   - ````[a-zA-Z]*\n`: Matches the start of the code block fence.
    #   - `(.*?)`: Captures (Group 2) the actual code content.
    #   - `\n?````: Matches the closing code block fence.
    pattern = re.compile(
        r"^(?:#+)\s+"                 # Line starts with one or more '#'
        r"(?:.*?)"                    # Optional preceding text like "File: "
        r"`([a-zA-Z0-9/\\._-]+)`"      # CAPTURE 1: The file path inside backticks.
        r"(?:.*?)\n"                  # The rest of the header line.
        r".*?"                        # Any text between header and code block.
        r"```[a-zA-Z]*\n"             # The opening code fence with optional language.
        r"(.*?)"                      # CAPTURE 2: The code block content.
        r"\n?```",                    # The closing code fence.
        re.DOTALL | re.MULTILINE
    )

    matches = pattern.findall(content)

    if not matches:
        print("\n[WARNING] No files and code blocks were found.")
        print("Please check the format of the input file. It should contain headers like:")
        print("  '### File: `src/main.js`' followed by a ```javascript code block.")
        return

    print(f"\nFound {len(matches)} files to create. Starting project generation...\n")

    created_files_count = 0
    failed_files = []

    for file_path, code_content in matches:
        # Sanitize the captured path to be safe
        file_path = file_path.strip()

        # Normalize path separators for the current operating system (e.g., '/' on Linux, '\' on Windows)
        # This makes the script cross-platform compatible.
        normalized_path = os.path.normpath(file_path)

        if not normalized_path:
            continue

        print(f"-> Processing: {normalized_path}")

        try:
            # Get the directory part of the path
            directory = os.path.dirname(normalized_path)

            # If the path includes directories, create them if they don't exist
            if directory:
                os.makedirs(directory, exist_ok=True)

            # Write the file content.
            # - `encoding='utf-8'` is crucial for handling all characters.
            # - `newline='\n'` ensures consistent Unix-style line endings, preventing issues with Git.
            with open(normalized_path, 'w', encoding='utf-8', newline='\n') as f:
                # Strip leading/trailing whitespace/newlines from the code block
                # to ensure the file content is clean.
                f.write(code_content.strip())

            created_files_count += 1

        except Exception as e:
            error_message = f"   [ERROR] Failed to create file {normalized_path}: {e}"
            print(error_message)
            failed_files.append((normalized_path, error_message))

    print("\n--- Generation Report ---")
    print(f"✅ Successfully created {created_files_count} files.")

    if failed_files:
        print(f"❌ Failed to create {len(failed_files)} files:")
        for path, reason in failed_files:
            print(f"  - {path}\n    Reason: {reason}")
    else:
        print("All files generated without errors.")
    print("\nProject generation complete.")

if __name__ == "__main__":
    # This is the file that should contain the full, combined output from the AI.
    # Make sure to save the AI's response into this file before running the script.
    input_filename = "01base.md"
    create_project_from_ai_output(input_filename)